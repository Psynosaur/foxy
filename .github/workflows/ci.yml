name: Foxy API Gateway CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: stable
            coverage: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Install coverage tools
      if: matrix.coverage
      run: |
        cargo install cargo-llvm-cov
        cargo install cargo-tarpaulin

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose --all-features

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: cargo test --test '*' --verbose

    - name: Run benchmarks
      run: cargo bench --verbose
      continue-on-error: true

    - name: Generate coverage report
      if: matrix.coverage
      run: |
        cargo llvm-cov --html --output-dir coverage \
          --ignore-filename-regex 'benches/.*'

    - name: Upload coverage to Codecov
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        files: coverage/lcov.info
        fail_ci_if_error: true

    - name: Upload coverage artifacts
      if: matrix.coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          foxy-io/foxy:latest
          foxy-io/foxy:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build release binary
      run: cargo build --release

    - name: Create release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          target/release/foxy
          target/release/foxy.exe
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install coverage tools
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: |
        cargo llvm-cov --json --output-path coverage.json \
          --ignore-filename-regex 'benches/.*'

    - name: Check coverage threshold
      run: |
        COVERAGE=$(jq '.data[0].totals.lines.percent' coverage.json)
        echo "Current coverage: $COVERAGE%"
        
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "Coverage $COVERAGE% is below minimum threshold of 90%"
          exit 1
        fi
        
        echo "Coverage check passed: $COVERAGE%"

    - name: Performance regression check
      run: |
        # Run benchmarks and compare with baseline
        cargo bench -- --output-format json > bench_results.json
        
        # This would typically compare against stored baseline results
        echo "Performance check completed"
        
    - name: Dependency vulnerability check
      run: |
        cargo install cargo-audit
        cargo audit --deny warnings
